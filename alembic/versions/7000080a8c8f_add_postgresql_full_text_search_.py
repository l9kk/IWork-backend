"""Add PostgreSQL full-text search capabilities

Revision ID: 7000080a8c8f
Revises: e19eea36bcad
Create Date: 2025-03-25 23:22:46.848905

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7000080a8c8f'
down_revision: Union[str, None] = 'e19eea36bcad'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('companies', sa.Column('search_vector', postgresql.TSVECTOR(), nullable=True))
    op.create_index('idx_company_search_vector', 'companies', ['search_vector'], unique=False, postgresql_using='gin')
    op.add_column('reviews', sa.Column('search_vector', postgresql.TSVECTOR(), nullable=True))
    op.create_index('idx_review_search_vector', 'reviews', ['search_vector'], unique=False, postgresql_using='gin')
    # ### end Alembic commands ###

    # Create function to update search vectors for reviews
    op.execute("""
    CREATE OR REPLACE FUNCTION reviews_search_vector_update() RETURNS trigger AS $$
    BEGIN
        NEW.search_vector = 
            setweight(to_tsvector('english', COALESCE(NEW.pros, '')), 'A') ||
            setweight(to_tsvector('english', COALESCE(NEW.cons, '')), 'A') ||
            setweight(to_tsvector('english', COALESCE(NEW.recommendations, '')), 'B');
        RETURN NEW;
    END
    $$ LANGUAGE plpgsql;
    """)

    # Create function to update search vectors for companies
    op.execute("""
    CREATE OR REPLACE FUNCTION companies_search_vector_update() RETURNS trigger AS $$
    BEGIN
        NEW.search_vector = 
            setweight(to_tsvector('english', COALESCE(NEW.name, '')), 'A') ||
            setweight(to_tsvector('english', COALESCE(NEW.description, '')), 'B') ||
            setweight(to_tsvector('english', COALESCE(NEW.industry, '')), 'C') ||
            setweight(to_tsvector('english', COALESCE(NEW.location, '')), 'C');
        RETURN NEW;
    END
    $$ LANGUAGE plpgsql;
    """)

    # Create triggers to automatically update search vectors
    op.execute("""
    CREATE TRIGGER reviews_search_vector_update_trigger
    BEFORE INSERT OR UPDATE ON reviews
    FOR EACH ROW EXECUTE FUNCTION reviews_search_vector_update();
    """)

    op.execute("""
    CREATE TRIGGER companies_search_vector_update_trigger
    BEFORE INSERT OR UPDATE ON companies
    FOR EACH ROW EXECUTE FUNCTION companies_search_vector_update();
    """)

    # Update existing data in batches to avoid timeouts with large datasets
    op.execute("""
    DO $$
    DECLARE
        r_count INTEGER := 0;
        batch_size INTEGER := 1000;
        r_total INTEGER := 0;
        c_count INTEGER := 0;
        c_total INTEGER := 0;
    BEGIN
        -- Get total counts
        SELECT COUNT(*) INTO r_total FROM reviews;
        SELECT COUNT(*) INTO c_total FROM companies;
        
        -- Update reviews in batches
        FOR i IN 0..CEIL(r_total::float/batch_size)-1 LOOP
            UPDATE reviews
            SET search_vector = 
                setweight(to_tsvector('english', COALESCE(pros, '')), 'A') ||
                setweight(to_tsvector('english', COALESCE(cons, '')), 'A') ||
                setweight(to_tsvector('english', COALESCE(recommendations, '')), 'B')
            WHERE id IN (
                SELECT id FROM reviews
                ORDER BY id
                LIMIT batch_size
                OFFSET i * batch_size
            );
            
            r_count := r_count + LEAST(batch_size, r_total - i * batch_size);
            RAISE NOTICE 'Updated % of % reviews', r_count, r_total;
        END LOOP;
        
        -- Update companies in batches
        FOR i IN 0..CEIL(c_total::float/batch_size)-1 LOOP
            UPDATE companies
            SET search_vector = 
                setweight(to_tsvector('english', COALESCE(name, '')), 'A') ||
                setweight(to_tsvector('english', COALESCE(description, '')), 'B') ||
                setweight(to_tsvector('english', COALESCE(industry, '')), 'C') ||
                setweight(to_tsvector('english', COALESCE(location, '')), 'C')
            WHERE id IN (
                SELECT id FROM companies
                ORDER BY id
                LIMIT batch_size
                OFFSET i * batch_size
            );
            
            c_count := c_count + LEAST(batch_size, c_total - i * batch_size);
            RAISE NOTICE 'Updated % of % companies', c_count, c_total;
        END LOOP;
        
        RAISE NOTICE 'Completed updating search vectors for % reviews and % companies', r_count, c_count;
    END $$;
    """)


def downgrade() -> None:
    """Downgrade schema."""
    # Drop triggers first
    op.execute("DROP TRIGGER IF EXISTS reviews_search_vector_update_trigger ON reviews")
    op.execute("DROP TRIGGER IF EXISTS companies_search_vector_update_trigger ON companies")

    # Drop functions
    op.execute("DROP FUNCTION IF EXISTS reviews_search_vector_update()")
    op.execute("DROP FUNCTION IF EXISTS companies_search_vector_update()")

    # Drop indexes and columns (already included in the auto-generated code)
    op.drop_index('idx_review_search_vector', table_name='reviews', postgresql_using='gin')
    op.drop_column('reviews', 'search_vector')
    op.drop_index('idx_company_search_vector', table_name='companies', postgresql_using='gin')
    op.drop_column('companies', 'search_vector')